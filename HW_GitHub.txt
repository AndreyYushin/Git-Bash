GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub.
Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON - на главной странице Git Hub нажать кнопку New в правом верхнем углу или Create a new repository по центру страницы. Далее вводим название репозитория,
 затем выбираем каким это будет репозиторий "Public" или "Private", далее ставим галочку на против [Add a README file] и подтвурждвем создание кнопкой [Create repository] внизу страницы.

 5. Клонировать репозиторий JSON на локальный компьютер - выбираем созданный репозиторий, кликаем по нему, переходим на страницу с репозиторием, нажимаем на кнопку [<>Code] выбираем вкладку "HTTPS", 
нажимаем справа на значок копировать URL, далее открываем терминал GitBash, переходим в директорию, где у нас будут храниться данные по вашему репозиторию, в командной строке пишем git clone и к
опируем через пробел ваш URL с внешнего репозитория. ПРИМЕР: git clone https://github.com/AndreyYushin/XML.git/ .

 6. Внутри локального JSON создать файл “new.json” - touch new.json.
 
 7. Добавить файл под гит - git add new.json .

 8. Закоммитить файл - git commit -m "message".

 9. Отправить файл на внешний GitHub репозиторий - git push.

 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON - vim new.json.

 11. Отправить изменения на внешний репозиторий - git add new.json, git commit -m "", git push.

 12. Создать файл preferences.json - touch preferences.json.

 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON - vim preferences.json.

 14. Создать файл skills.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON - touch skills.json далее vim skills.json.

 15. Отправить сразу 2 файла на внешний репозиторий - git add . .

 16. На веб интерфейсе создать файл bug_report.json - находясь в репозитории нажимаем кнопку [Add file], выбираем "Create new file" вводим название файла и его формат и справа нажимаем на кнопку [Commit changes], 
появляется всплывающее окно.

 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе - нажимаем кнопку [Commit changes].

 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON - выбираем файл, справа значок карандаша, наводим на него курсор появляется надпись "Edit this file" нажимаем на значок.

 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе - нажимаем кнопку [Commit changes].

 20. Синхронизировать внешний и локальный репозиторий JSON - в терминале Git Bash пишем команду git pull чтобы подтянуть недостающее файлы с внешнего репозитория, следом пишем команды git add . , git commit - m "" , git push.


XML
 21. Создать внешний репозиторий c названием XML -  на главной странице Git Hub нажать кнопку New в правом верхнем углу или Create a new repository по центру страницы. Далее вводим название репозитория,
 затем выбираем каким это будет репозиторий "Public" или "Private", далее ставим галочку на против [Add a README file] и подтвурждвем создание кнопкой [Create repository] внизу страницы.

 22. Клонировать репозиторий XML на локальный компьютер - выбираем созданный репозиторий, кликаем по нему, переходим на страницу с репозиторием, нажимаем на кнопку [<>Code] выбираем вкладку "HTTPS", 
нажимаем справа на значок копировать URL, далее открываем терминал GitBash, переходим в директорию, где у нас будут храниться данные по вашему репозиторию, в командной строке пишем git clone и к
опируем через пробел ваш URL с внешнего репозитория. ПРИМЕР: git clone https://github.com/AndreyYushin/XML.git/ .

 23. Внутри локального XML создать файл “new.xml” - touch new.xml.

 24. Добавить файл под гит - git add new.xml.

 25. Закоммитить файл - git commit -m "message".

 26. Отправить файл на внешний GitHub репозиторий - git add new.json, git commit -m "", git push.

 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML - vim new.xml.

 28. Отправить изменения на внешний репозиторий - git add new.json, git commit -m "", git push.

 29. Создать файл preferences.xml - touch preferences.xml.
 
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML - vim preferences.xml.


 31. Создать файл skills.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML - touch skills.xml далее vim skills.xml.

 32. Сделать коммит в одну строку - git commit -m "".

 33. Отправить сразу 2 файла на внешний репозиторий - git add . .

 34. На веб интерфейсе создать файл bug_report.xml - находясь в репозитории нажимаем кнопку [Add file], выбираем "Create new file" вводим название файла и его формат и справа нажимаем на кнопку [Commit changes], 
появляется всплывающее окно.

 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе - нажимаем кнопку [Commit changes].

 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML - выбираем файл, справа значок карандаша, наводим на него курсор появляется надпись "Edit this file" нажимаем на значок.

 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе - нажимаем кнопку [Commit changes].

 38. Синхронизировать внешний и локальный репозиторий XML - в терминале Git Bash пишем команду git pull чтобы подтянуть недостающее файлы с внешнего репозитория, следом пишем команды git add . , git commit - m "" , git push.


TXT
 39. Создать внешний репозиторий c названием TXT - на главной странице Git Hub нажать кнопку New в правом верхнем углу или Create a new repository по центру страницы. Далее вводим название репозитория,
 затем выбираем каким это будет репозиторий "Public" или "Private", далее ставим галочку на против [Add a README file] и подтвурждвем создание кнопкой [Create repository] внизу страницы.

 40. Клонировать репозиторий TXT на локальный компьютер - выбираем созданный репозиторий, кликаем по нему, переходим на страницу с репозиторием, нажимаем на кнопку [<>Code] выбираем вкладку "HTTPS", 
нажимаем справа на значок копировать URL, далее открываем терминал GitBash, переходим в директорию, где у нас будут храниться данные по вашему репозиторию, в командной строке пишем git clone и к
опируем через пробел ваш URL с внешнего репозитория. ПРИМЕР: git clone https://github.com/AndreyYushin/XML.git/ .

 41. Внутри локального TXT создать файл “new.txt” - touch new.txt.

 42. Добавить файл под гит - git add new.txt.

 43. Закоммитить файл - git commit -m "".

 44. Отправить файл на внешний GitHub репозиторий - git add new.json, git commit -m "", git push.

 45. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT - vim new.txt.

 46. Отправить изменения на внешний репозиторий - git add new.json, git commit -m "", git push.

 47. Создать файл preferences.txt - touch preferences.txt.

 48. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT - vim preferences.txt.

 49. Создать файл skills.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT - touch skills.txt далее vim skills.txt.

 50. Сделать коммит в одну строку - git commit - m "".

 51. Отправить сразу 2 файла на внешний репозиторий - git add . .

 52. На веб интерфейсе создать файл bug_report.txt - находясь в репозитории нажимаем кнопку [Add file], выбираем "Create new file" вводим название файла и его формат и справа нажимаем на кнопку [Commit changes], 
появляется всплывающее окно.

 53. Сделать Commit changes (сохранить) изменения на веб интерфейсе - нажимаем кнопку [Commit changes].

 54. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT - выбираем файл, справа значок карандаша, наводим на него курсор появляется надпись "Edit this file" нажимаем на значок.

 55. Сделать Commit changes (сохранить) изменения на веб интерфейсе - нажимаем кнопку [Commit changes].

 56. Синхронизировать внешний и локальный репозиторий TXT - в терминале Git Bash пишем команду git pull чтобы подтянуть недостающее файлы с внешнего репозитория, следом пишем команды git add . , git commit - m "" , git push.

